name:  Sonar Scan

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - develop

jobs:
  validate-changes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.2.0
        with:
          # Disabling shallow clone is recommended for improving relevancy of sonarqube reporting
          fetch-depth: 0

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3.2.0

      - name: Install dependencies
        run: dotnet restore

      - name: Sonarqube Begin
        run: | 
          dotnet tool install --global dotnet-sonarscanner
          dotnet sonarscanner begin /o:jayseth /k:Github-Test-Org /d:sonar.login=${{ secrets.SONAR_TOKEN }} /s:$GITHUB_WORKSPACE/SonarQube.Analysis.xml /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml

      - name: Build
        run: |
          dotnet build
          
      - name: Test with the dotnet CLI
        run: dotnet test --settings coverlet.runsettings --logger:trx
        env:
          ASPNETCORE_ENVIRONMENT: Development

      - name: Sonarqube end
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for SonarQube Issues
        run: |
          report=$(curl --location 'https://sonarcloud.io/api/qualitygates/project_status?projectKey=Github-Test-Org' \--header 'Authorization: Bearer ${{ secrets.SONAR_TOKEN }}')
          
          status=$(echo "$report" | jq -r '.projectStatus.status')
          result=$(echo "$report" | jq -r '.projectStatus.conditions[] | select(.status != "OK") | .metricKey + ": " + .actualValue + " / " + .errorThreshold + " (" + .status + ")"' | paste -sd, -)
          

          if [ "$status" != "OK" ]; then
            echo "SonarQube analysis failed! Vulnerabilities found."
            
            echo "Creating JIRA Issue..."
            
            JIRA_URL="https://mysitetest16235.atlassian.net/"
            USERNAME=${{ secrets.JIRA_USERNAME }}
            API_TOKEN=${{ secrets.JIRA_TOKEN }}

            ISSUE_CREATE_RESPONSE=$(curl -D- -u "$USERNAME:$API_TOKEN" -X POST --data "{
                                    \"fields\": {
                                      \"project\": {
                                        \"key\": \"SON\"
                                      },
                                      \"summary\": \"SonarQube analysis failed with error code $status!\",
                                      \"description\": \"$result\",
                                      \"issuetype\": {
                                        \"name\": \"Bug\"
                                      }
                                    }
                                  }" -H "Content-Type: application/json" -v --url "$JIRA_URL/rest/api/2/issue")

            # Extract the issue key from the response
            echo "Created a new issue in Jira, $ISSUE_CREATE_RESPONSE"
            exit 1
            
          else
            echo "SonarQube analysis passed. No vulnerabilities found."
          fi
